name: GPU Droplet Benchmarking

on:
  workflow_dispatch:
    inputs:
      slug:
        description: 'Droplet size slug (e.g., s-1vcpu-1gb, g-2vcpu-8gb-nvidia-l4)'
        required: true
        type: string
      region:
        description: 'DigitalOcean region (e.g., nyc1, nyc3, sfo3, tor1)'
        required: true
        type: string
        default: 'nyc3'
      image:
        description: 'Droplet image (e.g., ubuntu-22-04-x64, gpu-h100x8-base)'
        required: true
        type: string
        default: 'ubuntu-22-04-x64'
      ssh_keys:
        description: 'SSH key names (comma-separated, get with: doctl compute ssh-key list)'
        required: true
        type: string

jobs:
  create-droplet:
    runs-on: ubuntu-latest
    outputs:
      droplet-id: ${{ steps.create.outputs.droplet-id }}
      droplet-name: ${{ steps.create.outputs.droplet-name }}
      creation-success: ${{ steps.create.outputs.success }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Validate inputs
        run: |
          echo "üîç Validating inputs..."
          
          # Check if region exists
          echo "Checking region: ${{ github.event.inputs.region }}"
          if ! doctl compute region list --format Slug --no-header | grep -q "^${{ github.event.inputs.region }}$"; then
            echo "‚ùå Error: Region '${{ github.event.inputs.region }}' not found!"
            echo "Available regions:"
            doctl compute region list --format Slug,Name,Available
            exit 1
          fi
          echo "‚úÖ Region '${{ github.event.inputs.region }}' is valid"
          
          # Check if size exists
          echo "Checking droplet size: ${{ github.event.inputs.slug }}"
          if ! doctl compute size list --format Slug --no-header | grep -q "^${{ github.event.inputs.slug }}$"; then
            echo "‚ùå Error: Droplet size '${{ github.event.inputs.slug }}' not found!"
            echo "Available sizes:"
            doctl compute size list --format Slug,Memory,VCPUs,Disk,PriceMonthly
            exit 1
          fi
          echo "‚úÖ Droplet size '${{ github.event.inputs.slug }}' is valid"
          
          # Validate SSH keys
          echo "Validating SSH keys: ${{ github.event.inputs.ssh_keys }}"
          IFS=',' read -ra SSH_KEYS <<< "${{ github.event.inputs.ssh_keys }}"
          for key_name in "${SSH_KEYS[@]}"; do
            key_name=$(echo "$key_name" | xargs) # trim whitespace
            if ! doctl compute ssh-key list --format Name --no-header | grep -q "^${key_name}$"; then
              echo "‚ùå Error: SSH key name '${key_name}' not found!"
              echo "Available SSH keys:"
              doctl compute ssh-key list --format ID,Name,Fingerprint
              exit 1
            fi
          done
          echo "‚úÖ All SSH key names are valid"

      - name: Create droplet
        id: create
        run: |
          # Generate unique droplet name
          DROPLET_NAME="gpu-droplet-benchmark-$(date +%s)"
          echo "üöÄ Creating droplet: $DROPLET_NAME"
          
          # Convert SSH key names to IDs and format for doctl
          echo "Converting SSH key names to IDs..."
          SSH_KEY_IDS=""
          IFS=',' read -ra SSH_KEYS <<< "${{ github.event.inputs.ssh_keys }}"
          for key_name in "${SSH_KEYS[@]}"; do
            key_name=$(echo "$key_name" | xargs) # trim whitespace
            key_id=$(doctl compute ssh-key list --format ID,Name --no-header | grep "$key_name$" | awk '{print $1}')
            if [ -n "$SSH_KEY_IDS" ]; then
              SSH_KEY_IDS="$SSH_KEY_IDS $key_id"
            else
              SSH_KEY_IDS="$key_id"
            fi
            echo "  '$key_name' ‚Üí ID: $key_id"
          done
          
          echo ""
          echo "Configuration:"
          echo "  Name: $DROPLET_NAME"
          echo "  Size: ${{ github.event.inputs.slug }}"
          echo "  Region: ${{ github.event.inputs.region }}"
          echo "  Image: ${{ github.event.inputs.image }}"
          echo "  SSH Key Names: ${{ github.event.inputs.ssh_keys }}"
          echo "  SSH Key IDs: $SSH_KEY_IDS"
          echo ""
          
          # Create the droplet
          echo "‚è≥ Creating droplet..."
          if DROPLET_OUTPUT=$(doctl compute droplet create "$DROPLET_NAME" \
            --size "${{ github.event.inputs.slug }}" \
            --region "${{ github.event.inputs.region }}" \
            --image "${{ github.event.inputs.image }}" \
            --ssh-keys $SSH_KEY_IDS \
            --tag-names "gpu-droplet-benchmark,github-actions" \
            --format ID \
            --no-header 2>&1); then
            
            # Extract droplet ID - should be a single line with just the ID
            DROPLET_ID=$(echo "$DROPLET_OUTPUT" | head -n1 | xargs)
            
            # Validate we got a single numeric ID
            if [[ ! "$DROPLET_ID" =~ ^[0-9]+$ ]]; then
              echo "‚ùå ERROR: Invalid droplet ID received: '$DROPLET_ID'"
              echo "Full output was:"
              echo "$DROPLET_OUTPUT"
              exit 1
            fi
            
            echo "üéâ SUCCESS: Droplet created successfully!"
            echo "Droplet ID: $DROPLET_ID"
            echo "Droplet Name: $DROPLET_NAME"
            echo ""
            
            # Get detailed droplet info for display
            echo "üìä Droplet details:"
            doctl compute droplet get "$DROPLET_ID" --format ID,Name,Memory,VCPUs,Disk,Region,Image,Status,Created
            
            # Set outputs for next job
            echo "droplet-id=$DROPLET_ID" >> $GITHUB_OUTPUT
            echo "droplet-name=$DROPLET_NAME" >> $GITHUB_OUTPUT
            echo "success=true" >> $GITHUB_OUTPUT
            
          else
            echo "‚ùå FAILED: Could not create droplet"
            echo "Error details:"
            echo "$DROPLET_OUTPUT"
            
            # Analyze the error
            if echo "$DROPLET_OUTPUT" | grep -i "insufficient\|capacity\|unavailable" > /dev/null; then
              echo ""
              echo "üí° Analysis: No capacity available for this droplet size in region ${{ github.event.inputs.region }}"
            elif echo "$DROPLET_OUTPUT" | grep -i "invalid\|not found" > /dev/null; then
              echo ""
              echo "üí° Analysis: Invalid configuration - check size/region/image combination"
            elif echo "$DROPLET_OUTPUT" | grep -i "limit\|quota" > /dev/null; then
              echo ""
              echo "üí° Analysis: Account limits reached"
            fi
            
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Wait for droplet to be ready
        if: steps.create.outputs.success == 'true'
        run: |
          echo "‚è≥ Waiting for droplet to become active..."
          DROPLET_ID="${{ steps.create.outputs.droplet-id }}"
          
          # Wait up to 5 minutes for droplet to be active
          for i in {1..30}; do
            STATUS=$(doctl compute droplet get "$DROPLET_ID" --format Status --no-header)
            echo "Attempt $i/30: Status is '$STATUS'"
            
            if [ "$STATUS" = "active" ]; then
              echo "‚úÖ Droplet is now active!"
              
              # Get full droplet details
              echo ""
              echo "üìä Final droplet details:"
              doctl compute droplet get "$DROPLET_ID" --format ID,Name,PublicIPv4,Memory,VCPUs,Disk,Region,Image,Status,Created
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ö†Ô∏è Droplet did not become active within 5 minutes, but continuing..."
            fi
            
            sleep 10
          done

  destroy-droplet:
    runs-on: ubuntu-latest
    needs: create-droplet
    if: always() && needs.create-droplet.outputs.creation-success == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Destroy droplet
        run: |
          DROPLET_ID="${{ needs.create-droplet.outputs.droplet-id }}"
          DROPLET_NAME="${{ needs.create-droplet.outputs.droplet-name }}"
          
          echo "üßπ Destroying test droplet..."
          echo "Droplet ID: $DROPLET_ID"
          echo "Droplet Name: $DROPLET_NAME"
          echo ""
          
          # Show droplet details before deletion
          echo "üìä Current droplet status:"
          doctl compute droplet get "$DROPLET_ID" --format ID,Name,PublicIPv4,Status,Created || echo "Could not get droplet details"
          echo ""
          
          # Delete the droplet
          echo "üóëÔ∏è Deleting droplet..."
          if doctl compute droplet delete "$DROPLET_ID" --force; then
            echo "‚úÖ Droplet deleted successfully!"
            
            # Verify deletion
            echo ""
            echo "üîç Verifying deletion..."
            sleep 5
            
            if doctl compute droplet get "$DROPLET_ID" --format ID --no-header 2>/dev/null; then
              echo "‚ö†Ô∏è Droplet still exists, but deletion command succeeded (may take a moment)"
            else
              echo "‚úÖ Confirmed: Droplet has been completely removed"
            fi
          else
            echo "‚ùå Failed to delete droplet!"
            echo "‚ö†Ô∏è IMPORTANT: Manual cleanup may be required!"
            echo "Run: doctl compute droplet delete $DROPLET_ID --force"
            exit 1
          fi

  summary:
    runs-on: ubuntu-latest
    needs: [create-droplet, destroy-droplet]
    if: always()
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "## üß™ Droplet Capacity Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Slug:** \`${{ github.event.inputs.slug }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Region:** \`${{ github.event.inputs.region }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** \`${{ github.event.inputs.image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **SSH Key Names:** \`${{ github.event.inputs.ssh_keys }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check creation result
          if [ "${{ needs.create-droplet.outputs.creation-success }}" = "true" ]; then
            echo "### ‚úÖ Creation: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "- **Droplet ID:** \`${{ needs.create-droplet.outputs.droplet-id }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Droplet Name:** \`${{ needs.create-droplet.outputs.droplet-name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "üéâ **Capacity is available!** The droplet was created successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Creation: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è **No capacity available** or configuration issue." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check destruction result
          if [ "${{ needs.create-droplet.outputs.creation-success }}" = "true" ]; then
            if [ "${{ needs.destroy-droplet.result }}" = "success" ]; then
              echo "### üßπ Cleanup: SUCCESS" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Test droplet was destroyed successfully." >> $GITHUB_STEP_SUMMARY
            else
              echo "### ‚ö†Ô∏è Cleanup: FAILED" >> $GITHUB_STEP_SUMMARY
              echo "‚ùå **IMPORTANT:** Test droplet may still exist!" >> $GITHUB_STEP_SUMMARY
              echo "**Manual cleanup required:** \`doctl compute droplet delete ${{ needs.create-droplet.outputs.droplet-id }} --force\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ‚ÑπÔ∏è Cleanup: SKIPPED" >> $GITHUB_STEP_SUMMARY
            echo "No droplet was created, so no cleanup needed." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*This test creates a real droplet to verify capacity, then immediately destroys it.*" >> $GITHUB_STEP_SUMMARY